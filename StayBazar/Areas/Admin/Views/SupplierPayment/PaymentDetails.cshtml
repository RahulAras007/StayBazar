@model StayBazar.Areas.Admin.Models.SupplierPaymentModel
@{
    ViewBag.Title = "Supplier Payment";
    Model.dtPayment = Convert.ToDateTime(Model.dtPayment).ToShortDateString();
}



<style>
    .row {
        margin-bottom: 8px;
    }
</style>
@*<h2>Supplier Payment</h2><br />*@
<div class="page-title-container style3">
                             <div class="row">
                                 <div class="col-md-4">
                                     <h2 style="color:white">@ViewBag.Title</h2>
                                 </div>

                             </div>
</div>
@using (Html.BeginForm("SaveSupplierPayment", "SupplierPayment", FormMethod.Post, new { @id = "frmSubmit" }))
{
    @Html.HiddenFor(m => m.supplierPaymentId)
    <input type="hidden" value="@Model.supplierPaymentId" id="supPaymentId" />



    <div class="col-md-12">
        <div class="col-md-6" style="padding:0;">

            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(m => m.GrossAmount)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.GrossAmount, null, new { @class = "form-control", @id = "txtGrossAmount" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(m => m.NetAmount)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.NetAmount, null, new { @class = "form-control", })
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(m => m.TdsAmount)
                </div>
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.TdsAmount, null, new { @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="col-md-6" style="padding:0;">
            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(m => m.ModeofPayment)
                </div>
                <div class="col-md-6">
                    @*@Html.TextBoxFor(m => m.ModeofPayment, null, new { @class = "form-control" })*@
                    @Html.DropDownListFor(x => x.ModeofPayment, new SelectList(Model.payment), "Select Mode of Payment", new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(m => m.Bank)
                </div>
                <div class="col-md-6">
                    <input type="hidden" value="@Model.Status" id="status">
                    @Html.DropDownListFor(x => x.Bank, new SelectList(Model.bankname), "Select Bank", new { @class = "form-control" })
                    @*@Html.TextBoxFor(m => m.Bank, null, new { @class = "form-control" })*@

                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <label>Payment Date</label>
                </div>
                <div class="col-md-6 PaymentDate">
                    <input type="text" id="dtPayment" name="dtPayment" value="@Model.dtPayment" class="form-control input-sm" onchange="PaymentDate()">

                </div>
            </div>

        </div>
        <div class="col-md-12 text-right" style="padding-right: 125px;">
            <button class="btn btn-success" type="button" id="btnSubmit" onclick="Paymentsbt()">Submit</button>
            <button class="btn btn-danger" type="button" onclick="cancel()">Cancel</button>
        </div>
    </div>


    @*<div class="row">

        </div>*@


    <hr />

    if (Model.bookinreferno != null)
    {
        var i = 1;
        <h2 colspan="6" style="text-align: center;font-size: 22px;">
            Booking Selected
        </h2>
        foreach (var bookinreferno in Model.bookinreferno)
        {
            Model.Supplier = BLayer.SupplierPayment.GetPaymentdetails(bookinreferno);
            <table class="table table-custom table-bordered">

                <thead>
                    <tr></tr>
                    <tr>
                        <th align="center">Property Name</th>
                        <th align="center">Property City</th>
                        <th align="center">Customer Name</th>
                        <th align="center">Confirmation No</th>
                        <th align="center">Supplier Name</th>
                        <th align="center">Date</th>

                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Model.Supplier.propertyname</td>
                        <td>@Model.Supplier.propertycity</td>
                        <td>@Model.Supplier.CustomerName</td>
                        <td>@Model.Supplier.OrderId</td>
                        <td>@Model.Supplier.SupplierName</td>
                        <td>
                            Check IN:@Model.Supplier.CheckIn_date.ToShortDateString()<br />
                            Check Out:@Model.Supplier.CheckOut_date.ToShortDateString()
                        </td>

                    </tr>
                    <tr>
                        <td colspan="3"></td>
                        <td>
                            Supplier payable: @Model.Supplier.Buyprice<br />
                            Amount already paid :@Model.Supplier.AmountPaid
                        </td>
                        <td>
                            Amount  : <input type="hidden" value="@Model.Supplier.supplierId" id="supplierId_@bookinreferno">
                            <input type="hidden" value="@Model.Supplier.Buyprice" id="Buyprice_@bookinreferno" name="Buyprice_@bookinreferno">
                            <input type="hidden" value="@Model.Supplier.AmountPaid" id="AmntPaid_@bookinreferno">

                            <input type="hidden" value="@Model.Supplier.SupplierEmail" id="SupplierEmail_@bookinreferno">
                            <input type="text" value="0" class="amtpaid" id="AmountPaid_@bookinreferno" onchange="compareAmt('@bookinreferno')" />
                        </td>
                        <td colspan="2"><input type="checkbox" @if (@Model.Supplier.supplierPayment) { <text> checked </text> } id="supplierPayment_@bookinreferno" /> Mark as Payment Done</td>
                    </tr>
                </tbody>
            </table>


            i = i + 1;
            <hr />
            //     BLayer.Supplier.DeleteSupplierbyclientidsupid(Supplierid, ClientId);
        }
    }

}


<script>
    function PaymentDate()
    {
        debugger
        re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
        var date=  $("#dtPayment").val()
        if(date==null||date=="")
        {
            var curDate = new Date();
            curDate.setDate(curDate.getDate());
            var idat = pad(curDate.getDate(), 2) + "/" + pad(parseInt(curDate.getMonth()) + 1, 2) + "/" + curDate.getFullYear();
            $("#dtPayment").val(idat);
        }
        else if(date != '' && !date.match(re)) {
            var curDate = new Date();
            curDate.setDate(curDate.getDate());
            var idat = pad(curDate.getDate(), 2) + "/" + pad(parseInt(curDate.getMonth()) + 1, 2) + "/" + curDate.getFullYear();
            $("#dtPayment").val(idat);
        }
        else{
            return true;
        }
    }
    function pad(num, size) {
        var s = num + "";
        while (s.length < size) s = "0" + s;
        return s;
    }
    $(function () {
        var PaymentDate = $('#dtPayment').datepicker(
                                        {

                                            dateFormat: "dd/mm/yy"
                                        });



        $(".PaymentDate div").click(function () { $("#dtPayment").datepicker('show'); });
    });

    function compareAmt(BookRef)
    {

        var Amtpaid = $("#AmountPaid_" +  BookRef).val();
        var AmntPaid = $("#AmntPaid_" +  BookRef).val();
        var Buyprice = $("#Buyprice_" +  BookRef).val();
        var sumamt=Number(Amtpaid)+Number(AmntPaid);

        if(isNaN(Amtpaid)){
            alert('Please enter valid number');
            return false;
        }

        if(Number(Buyprice)<Number(sumamt)){

            alert('Total Amount paid should not be greater than Supplier payable amount. Please check amount of - '+BookRef);
            return false;
        }
        else{
            return true;
        }
    }

    function cancel()
    {
        var url = '@Url.Action("Index", "SupplierPayment")';
        window.location.href = url;
    }
    function Paymentsbt()
    {
        var allowsave = true;
        var BookRefNo1 = @Html.Raw(Json.Encode(Model.bookinreferno));
        for (var i = 0; i < BookRefNo1.length; i++) {
            var BookRef1 = BookRefNo1[i];

            var Amtpaid = $("#AmountPaid_" +  BookRef1).val();
            var AmntPaid = $("#AmntPaid_" +  BookRef1).val();
            var Buyprice = $("#Buyprice_" +  BookRef1).val();
            var sumamt=Number(Amtpaid)+Number(AmntPaid);

            if(isNaN(Amtpaid)){
                alert('Please enter valid number');
                return false;
            }

            if(Number(Buyprice)<Number(sumamt)){
                alert('Total Amount paid should not be greater than Supplier payable amount. Please check amount of - '+BookRef1);
                allowsave = false;
                break;
            }
            else{
                allowsave = true;
            }
        }

        if(allowsave)
        {
            if($("#frmSubmit").valid()){
                var inputs = $(".amtpaid");
                var amtpaid=0;
                for (var i = 0; i < inputs.length; i++) {

                    var BookR = inputs[i];

                    var AmountPaid = $(inputs[i]).val();

                    amtpaid=Number(amtpaid)+Number(AmountPaid);
                }
                var txtGrossAmount = $("#txtGrossAmount").val() ;

                if(amtpaid>txtGrossAmount){

                    alert('Total of amounts typed for all bookings should not be greater than Gross amount. Please change the amounts.');
                }
                else{
                    $("#btnSubmit").attr("disabled", true);

                    var url = '@Url.Action("SaveSupplierPayment", "SupplierPayment")?'+$("#frmSubmit").serialize();
                    $.post(url, function (data) {

                        if(data>0 &&data!=""){

                            $('#supplierPaymentId').val(data);
                            var SupPaymentId =data;



                            var BookRefNo = @Html.Raw(Json.Encode(Model.bookinreferno));
                            for (var i = 0; i < BookRefNo.length; i++) {

                                var BookRef = BookRefNo[i];
                                var Buypriceid = "#Buyprice_" +  BookRef;
                                var Buyprice = $(Buypriceid).val();
                                var BookRefNo1=false;
                                var AmountPaidid = "#AmountPaid_" +  BookRef;
                                var AmountPaid = $(AmountPaidid).val();

                                var supplierId = "#supplierId_" +  BookRef;
                                var supplier = $(supplierId).val();
                                var SupplierEmail = "#SupplierEmail_" +  BookRef;
                                var SupplierEmailid = $(SupplierEmail).val();

                                var supplierPaymentid = "#supplierPayment_" +  BookRef;

                                if($(supplierPaymentid).prop("checked") == true){
                                    var   supplierPayment=true;
                                }
                                else if($(supplierPaymentid).prop("checked") == false){
                                    var  supplierPayment=false;
                                }
                                var Amtpaidchk = $("#AmountPaid_" +  BookRef).val();
                                var AmntPaidchk = $("#AmntPaid_" +  BookRef).val();
                                var Buypricechk = $("#Buyprice_" +  BookRef).val();
                                var sumamtchk=Number(Amtpaidchk)+Number(AmntPaidchk);

                                if(Number(Buypricechk)==Number(sumamtchk)){

                                    var  supplierPayment=true;
                                }

                                var SupplierPaymentId1= $( "#supPaymentId").val();
                                var j=i+1;

                                if(j==BookRefNo.length){

                                    BookRefNo1=true;
                                }

                                var url = '@Url.Action("SaveSupplierPaymentDetails", "SupplierPayment")?SupplierPaymentId='+SupPaymentId+"&SupplierId="+supplier+"&SupplierEmail="+SupplierEmailid+"&bookingreference="+BookRef+"&amount="+AmountPaid+"&supplierPayment="+supplierPayment+"&BookRefNo1="+BookRefNo1+"&status="+0;
                                $.post(url, function (data) {




                                });
                                if(BookRefNo1==true){

                                    @*var url = '@Url.Action("ReportPdf", "SupplierPayment")?SupplierPaymentId='+SupPaymentId;
                                window.open(url, "_blank", " scrollbars=yes, resizable=yes, width=400, height=400");*@
                                    var url = '@Url.Action("Index", "SupplierPayment")';
                                    window.location.href = url;


                                }

                            }
                        }


                    });

                }
            }
        }
        else{
            //alert('Total Amount paid should not be greater than Supplier payable amount');
        }




    }
</script>