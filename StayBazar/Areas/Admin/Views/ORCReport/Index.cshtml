@model IEnumerable<CLayer.OfflineBooking>
@{
    long i = 0;
    decimal tt = 0;
    decimal m = 0;


    long totalnights = 0;


    int bookingType = 0;
    double gross = 0;


    double AmountBeforeServiceTax = 0;
    double totalAmountBeforeTax = 0;
    double totalSupplierAmountBeforeTax = 0;
    ViewBag.Title = "Customer Invoice GST Report";
    // Layout = "~/Areas/Admin/Views/Shared/_reportLayout.cshtml";
}

@*<div class="col-md-12">
    <h2 class="bold">
        
    </h2>
</div>*@
<input type="hidden" id="HiddenFromDate" value="@ViewBag.FromDate"/>
<input type="hidden" id="HiddenToDate" value="@ViewBag.ToDate" />
<input type="hidden" id="HiddenSearchString" value="@ViewBag.SearchString" />

<div class="page-title-container style3">
    <div class="row">

        <div class="col-md-4">
            <h2 style="color:white">@ViewBag.Title</h2>
        </div>

        @*<div class="col-md-10">*@
        @using (Html.BeginForm("Filter", "ORCReport", FormMethod.Post, new { @id = "CustomerInvoiceReportFilter" }))
        {
            @*<div class="row">*@
            <div class="col-md-1 form-group">
                <label>From Date</label><input type="text" id="FromDate" name="FromDate" class="form-control input-sm" />
            </div>


            <div class="col-md-1 form-group">
                <label>To Date</label><input type="text" id="ToDate" name="ToDate" class="form-control input-sm" />
            </div>
            <br />
            <div class="col-md-1 form-group margin-top-10">

                <button id="btnSearch" class="btn btn-default margin-top-10" type="submit" tabindex="3">Search</button>
            </div>

            <div class="col-md-3 form-group hidden">
                <label>Customer Name/Email</label>
                <input type="text" id="SearchString" name="SearchString" class="form-control input-sm" />
            </div>


            <div class="col-md-1">
                <br />
                @*<div class="col-md-3 exporticons" style="TOP: -6PX;">
                    <a title="Pdf" href="#" onclick="PDF()" id="btnNextClick" class="fa fa-file-pdf-o" tabindex="6"></a>
                </div>*@
                <div class="exporticons" style="TOP: -6PX;">
                    <a title="Export" onclick="Export()" id="btnNextClick" class="fa fa-file-excel-o" tabindex="6"></a>
                </div>
            </div>

        }
    </div>

        </div>
<br />
<br />

<div class="container-fluid">
    <div style="padding-left: 30px;padding-right:30px;">
        <div class="row">
            <table border="0" class="table table-custom table-bordered table-hover table-striped" cellpadding="1">
                <thead>
                    <tr>
                        <th>Sl No</th>
                        <th>Booking Category</th>
                        <th>Billing Entity</th>
                        <th>Invoice Date</th>
                        <th>Invoice No</th>
                        <th>Booking ID</th>
                        <th>Customer Name</th>
                        <th>Customer State</th>
                        <th>Property Name</th>
                        <th>Property City</th>
                        <th>Property State</th>
                        <th>Guest Name</th>
                        <th>Check In Date</th>
                        <th>Check Out Date</th>
                        <th>Total Room Night</th>
                        <th>Total Customer Value Before GST</th>
                        <th>Total Supplier value before GST</th>
                        <th>Gross Margin</th>
                        <th>ORC Amount</th>
                        <th>Net Margin</th>
                        <th>ORC Payee Name</th>
                        <th>Bank</th>
                        <th>Branch</th>
                        <th>Account No</th>
                        <th>PAN</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (CLayer.OfflineBooking pr in Model)
                    {

                        i = i + 1;
                        //if (pr.Noofnight > 0)
                        //{
                        //    totalnights = pr.NoOfRooms * pr.Noofnight;
                        //}
                        //else
                        //{
                        //    totalnights = pr.NoOfRooms;
                        //}
                        totalnights = pr.TotalNights;
                        m = totalnights * pr.AvgDailyRateBefreStaxForSalePrice;
                        tt = pr.AvgDailyRateBefreStaxForSalePrice * totalnights;

                        bookingType = pr.BookingTypeInt;


                        DateTime checkin = pr.CheckIn_date;
                        DateTime checkout = pr.CheckOut_date;
                        TimeSpan ts = checkout - checkin;
                        int differenceInDays = ts.Days;

                        long NoOfPaxAdultS = pr.NoOfPaxAdult;

                        long NoOfPaxChild = pr.NoOfPaxChild;
                        long NOofPax = (NoOfPaxAdultS + NoOfPaxChild);

                        //Customer Value -- amount without tax
                        if (bookingType == (int)CLayer.ObjectStatus.OfflineBookingType.Regular)
                        {

                            AmountBeforeServiceTax = (double)((pr.AvgDailyRateBefreStaxForSalePrice * totalnights)) + pr.VSalePriceBeforeTax;
                            totalSupplierAmountBeforeTax = (double)((pr.AvgDailyRateBefreStaxForBuyPrice * totalnights)) + pr.VBuyPriceBeforeTax;
                        }
                        else
                        {
                            AmountBeforeServiceTax = pr.DirectAmount + pr.VSalePriceBeforeTax;
                            totalSupplierAmountBeforeTax = (double)((pr.AvgDailyRateBefreStaxForBuyPrice * totalnights)) + pr.VBuyPriceBeforeTax;
                        }


                        double Otherservicesamount = Math.Round((double)pr.BuyPriceforotherservicesForSalePrice, 2);
                        double OtherServicesBuy = (double)pr.BuyPriceforotherservicesForBuyprice;


                        totalAmountBeforeTax = AmountBeforeServiceTax + Otherservicesamount;

                        totalSupplierAmountBeforeTax = totalSupplierAmountBeforeTax + OtherServicesBuy;

                        if (bookingType == (int)CLayer.ObjectStatus.OfflineBookingType.Regular)
                        { gross = totalAmountBeforeTax - totalSupplierAmountBeforeTax; }
                        else
                        { gross = pr.DirectAmount + ((Otherservicesamount - OtherServicesBuy) + (pr.VSalePriceBeforeTax - pr.VBuyPriceBeforeTax)); }
                        //Supplier Value -- amount without tax
                        // decimal TotalAmountBeforeServiceTaxSupplier = ((pr.AvgDailyRateBefreStaxForBuyPrice * total));
                        // decimal OtherservicesamountSupplier = Math.Round(pr.BuyPriceforotherservicesForBuyprice, 2);

                        //                       decimal TotalAmountBeforeServiceTaxSupplierandOtherservicesamountSupplier = TotalAmountBeforeServiceTaxSupplier + OtherservicesamountSupplier;

                        //VBuyPriceBeforeTax = pr.VBuyPriceBeforeTax;
                        //VSalePriceBeforeTax = pr.VSalePriceBeforeTax;
                        //VBuyPriceTotal = reportList.VBuyPriceTotal;
                        //vSalePriceTotal = reportList.vSalePriceTotal;
                        //vBuyTax = reportList.vBuyTax;
                        //vSaleGST = reportList.vSaleGST;

                        <tr>
                            <td align="center">@i</td>
                            <td>
                                @if (bookingType == (int)CLayer.ObjectStatus.OfflineBookingType.TAC)
                                {
                                    <text>TAC Booking</text>}
                                else
                                {
                                    if (bookingType == (int)CLayer.ObjectStatus.OfflineBookingType.Direct)
                                    { <text>Direct Booking</text>}
                                else
                                { <text>Regular Booking</text>}
                        }
                            </td>
                            <td align="left">@pr.SBEntityName</td>
                            <td align="center">@pr.InvoiceDate.ToShortDateString()</td>
                            <td align="center">@pr.InvoiceNumber</td>
                            <td align="center">@pr.ConfirmationNumber</td>
                            <td>@pr.FirstName</td>
                            <td>@pr.CustomerStatename</td>
                            <td>@pr.PropertyName</td>
                            <td>@pr.City</td>
                            <td>@pr.PropertyStatename</td>
                            <td>@pr.Guestname</td>
                            <td align="center">@pr.CheckIn_date.ToShortDateString()</td>
                            <td align="center">@pr.CheckOut_date.ToShortDateString()</td>
                            @*<td align="center">@(pr.NoOfPaxAdult + pr.NoOfPaxChild)</td>
                                <td align="center">@pr.NoOfRooms</td>
                                <td align="center">@pr.Noofnight</td>*@

                            <td align="right">@totalnights</td>
                            <td align="right">@Math.Round(totalAmountBeforeTax, 2)</td> @*Room Value before GST*@
                            <td align="right">@Math.Round(totalSupplierAmountBeforeTax, 2)</td>
                            <td align="right">@Math.Round(gross, 2)</td>
                            <td align="right">@Math.Round(pr.ORCAmount, 2)</td>
                            <td align="right">@Math.Round(gross - pr.ORCAmount, 0)</td>
                            <td align="right">@pr.AgentName</td>
                            <td align="right">@pr.AgentBank</td>
                            <td align="right">@pr.AgentBranch</td>
                            <td align="right">@pr.AgentAccount</td>
                            <td align="left">@pr.AgentPAN</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


        <script>


  var  from=   $('#HiddenFromDate').val();
  var to = $('#HiddenToDate').val();
  var SearchString = $('#HiddenSearchString').val();

  //var f = new Date(from);
  //var t = new Date(to);

  //var from1 = f.ToShortDateString();
  //var to1 = t.ToShortDateString();

  $('#FromDate').val(from);
  $('#ToDate').val(to);
  $('#SearchString').val(SearchString);



    $(function () {
        $('#FromDate').datepicker(
            {
                dateFormat: "dd/mm/yy"
            });
        $('#ToDate').datepicker(
            {
                dateFormat: "dd/mm/yy",
                defaultDate: "+1w",
                beforeShow: function () {
                    //$(this).datepicker('option', 'minDate', $('#FromDate').val());
                    //if ($('#FromDate').val() === '') $(this).datepicker('option', 'minDate', 0);
                }
            });
    });

    function PDF() {
        var url = '@Url.Action("PDFView", "ORCReport")?' + $('#CustomerInvoiceReportFilter').serialize();
        window.open(url, "_blank", " scrollbars=yes, resizable=yes, width=400, height=400");
    }
    function Export() {
        window.location = '@Url.Action("ExcelReport", "ORCReport")?' +$('#CustomerInvoiceReportFilter').serialize();
        //window.open(url, "_blank", " scrollbars=yes, resizable=yes, width=400, height=400");
    }

        </script>
