@model StayBazar.Areas.Admin.Models.StaticHtmlPageModel
@{
    ViewBag.Title = Model.PageTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    double km;
    string no_image = System.Configuration.ConfigurationManager.AppSettings.Get("NoImageLnk");
}
@section scripts{
    <script type="text/javascript">
        dataLayer = [{
            'cityName': '@Model.City',
            'locationName': '@Model.Location',
        }];
    </script>
}
<script type="text/javascript">
    $(function () {
        cx_reloadRates();
        var v = $("#curPick").val();
        $("#srchcur").val(v);
        cx_removeDefault();
        cx_ChangeCurRate(v);
    });
</script>

<div class="container">
    <h2>
        <a href="/Admin/StaticPage/Index" class="btn btn-sm btn-default" title="back to list"><span class="glyphicon glyphicon-arrow-left"></span></a>
        Choose Properties
    </h2>
    <div class="row">
        @using (Html.BeginForm("ApplyFilter", "PropertyAdd", FormMethod.Post, new { id = "searchform", onsubmit = "submitSForm()", area = "Admin" }))
        {
            @Html.HiddenFor(m => m.PageId)
            <div class="col-xs-12 col-md-2">
                <h4>Destination</h4>
                <div class="margin10px"></div>
                <div>
                    <input type="text" id="Destination" class="destination" name="Destination" placeholder="Enter your destination" value="@Model.Destination" onkeypress="return isINLetters(event)" />
                </div>
            </div>
            <div class="col-xs-12 col-md-2">
                <h4>Location</h4>
                <div class="margin10px"></div>
                <div>
                    <input type="text" id="Location" class="destination" name="Location" placeholder="Enter your Location" value="@Model.Location" />
                </div>
            </div>
            <div class="col-xs-12 col-md-2 searchbtnctr">

                <button class="redbg whitetext" id="searchbutton" type="button" onclick="submitSForm()">Search</button>
            </div>
            <input type="hidden" id="CurrentPage" name="CurrentPage">
            @Html.HiddenFor(m => m.PageTitle)
            @Html.HiddenFor(m => m.City)
            <div class="col-md-4 col-lg-offset-2 left">
                <br />
                <div class="height10"></div>
                <div class="margin-top-10"></div>
                <a href="/Admin/StaticPage/Index" class="btn btn-sm btn-default" title="back to list"><span class="glyphicon glyphicon-arrow-left"></span></a> Back to list
            </div>


        }
        @Html.HiddenFor(m => m.Destination)
    </div>
    <div class="height10"></div>

    <div class="row">

        <div class="col-md-8" id="resultlisting">

            @Html.Partial("~/Areas/Admin/Views/PropertyAdd/SearchList.cshtml", Model)

        </div>

        <div class="col-md-4">
            <br />
            <br />
            <h3>Selected Properties</h3>
            <div class="row">
                <div class="col-md-12">
                    <table border="0" class="table table-condensed table-responsive table-custom">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>City</th>
                                <th>Location</th>
                                <th>Remove</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (CLayer.SearchResult rst in Model.PropertyAdd)
                            {
                                <tr>
                                    <td>@rst.Title</td>
                                    <td>@rst.City</td>
                                    <td>@rst.Location</td>
                                    <td><a href="/Admin/PropertyAdd/Remove?PropertyId=@rst.PropertyId&&PageId=@Model.PageId&&Destination=@Model.Destination" onclick="return confirm('Are you sure you want to Remove this Property?')" title="Remove"><span class="glyphicon glyphicon-floppy-remove"></span></a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>
@if (Model.PropertyList.Count > 0)
{
    <script type='text/javascript'>
        $("#mapview").one("click", function () {
            $.getScript("https://maps.google.com/maps/api/js?sensor=false&callback=MapApiLoaded");
        });
        function MapApiLoaded() {

            var richmarker_url = "Scripts/richmarker-compiled.js";
            $.getScript(richmarker_url, function () {

                var map;
                var bounds = new google.maps.LatLngBounds();
                var mapOptions = {
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                };

                // Display a map on the page
                map = new google.maps.Map($('.map_canvas').get(0), mapOptions);

                // Multiple Markers
                var markers = [
                   //[Title/Name, Address, Latitude, Longitude, URL to listing, Price, Star Rating]
                  @foreach (CLayer.SearchResult rst in Model.PropertyList)
              {
                  if (rst.Lattitude == "0" || rst.Lattitude == "") { continue; }
            <text>[
               "@rst.Title", "@rst.Location",@rst.Lattitude,@rst.Longitude, "/Property/Index/@rst.PropertyId",@(Math.Round(rst.Amount)),@rst.StarRate
                  ],</text>
            }
                ];


                // Display multiple markers on a map
                var marker, i;

                // Loop through our array of markers & place each one on the map
                for (i = 0; i < markers.length; i++) {
                    var position = new google.maps.LatLng(markers[i][2], markers[i][3]),
                        star;
                    bounds.extend(position);

                    switch (markers[i][6]) {
                        case 1:
                            star = '@Html.Raw(StayBazar.Common.Utils.GetStarRating(1))';
                            break;
                        case 2:
                            star = '@Html.Raw(StayBazar.Common.Utils.GetStarRating(2))';
                            break;
                        case 3:
                            star = '@Html.Raw(StayBazar.Common.Utils.GetStarRating(3))';
                            break;
                        case 4:
                            star = '@Html.Raw(StayBazar.Common.Utils.GetStarRating(4))';
                            break;
                        case 5:
                            star = '@Html.Raw(StayBazar.Common.Utils.GetStarRating(5))';
                            break;
                        default:
                            star = '@Html.Raw(StayBazar.Common.Utils.GetStarRating(0))';
                    }

                    marker = new RichMarker({
                        position: position,
                        map: map,
                        title: markers[i][0],
                        content: '<div class="marker text-center">' +
                            '<a href="' + markers[i][4] + '" target="_blank" class="border-radius">' +
                            '<div class="tilt"><div class="whitetext number">' + (i + 1) + '</div></div>' +
                            '<div class="whitetext price"><i class="fa cxprice fa-rupee"></i><span class="cxcurele">' + markers[i][5] + '</span></div>' +
                            '<span class="star">' + star + '</span>' +
                            '<div class="info_content">' +
                            '<h4>' + markers[i][0] + '</h4>' +
                            '<p>' + markers[i][1] + '</p>' +
                            '</div>' +
                            '</a>' +
                            '<div class="indicator"></div>' +
                            '</div>',
                        shadow: false
                    });

                    // Automatically center the map fitting all markers on the screen
                    map.fitBounds(bounds);
                }

                // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
                var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function (event) {
                    this.setZoom(10);
                    google.maps.event.removeListener(boundsListener);
                    cx_reloadRates();
                    cx_removeDefault();
                    cx_changeAllRates();
                });

                // Enable the visual refresh
                google.maps.visualRefresh = true;
            });
        }
        $(function () { $(".maxpinfo").popover({ trigger: "hover" }); });
    </script>

}
<script type='text/javascript'>


    $().ready(function () {
        $('.trunc').jTruncate({
            length: 120,
            minTrail: 0,
            moreText: "",
            lessText: "",
            moreAni: "fast",
            lessAni: 1000,
            ellipsisText: "",
        });
    });
</script>
<script type='text/javascript'>
    $(window).resize(function () {
        imgadj();
    });
    $(function () { imgadj(); });
    function imgadj() {
        $(".img-thumb").each(function () {
            var refH = $(this).height();
            var refW = $(this).width();
            var refRatio = refW / refH;
            var imgH = $(this).children("img").height();
            var imgW = $(this).children("img").width();

            if ((imgW / imgH) < refRatio) {
                $(this).addClass("portrait");
            } else {
                $(this).addClass("landscape");
            }
        })
    }
</script>

<script type="text/javascript">

    $(function () {
        // $('#most-popular1').show();
        $('#most-popular12').show();
        $('#most-popular123').show();

        // disabling dates
        var now = new Date();
        now.setDate(now.getDate() + 7);
        //    var now = nowTemp; // new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDay(), 0, 0, 0, 0);
        var checkin = $('#CheckIn').datepicker(
            {
                minDate: 1,
                defaultDate: now,
                numberOfMonths: 2,
                dateFormat: "dd/mm/yy"
            });
        $(".checkin div").click(function () { $("#CheckIn").datepicker('show'); });
        $(".checkout div").click(function () { $("#CheckOut").datepicker('show'); });

        now.setDate(now.getDate() + 2);
        var checkout = $('#CheckOut').datepicker(
             {
                 minDate: 2,
                 numberOfMonths: 2,
                 defaultDate: now,
                 dateFormat: "dd/mm/yy"
             });

        $("#CheckIn").change(function () {
            var v = $(this).val().trim();

            var curDate = new Date();
            curDate.setDate(curDate.getDate() + 1);
            var idat = pad(curDate.getDate(), 2) + "/" + pad(parseInt(curDate.getMonth()) + 1, 2) + "/" + curDate.getFullYear();
            curDate.setDate(curDate.getDate() + 2);
            var odat = pad(curDate.getDate(), 2) + "/" + pad(parseInt(curDate.getMonth()) + 1, 2) + "/" + curDate.getFullYear();

            if (checkDate(v)) {
                re = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
                if (regs = v.match(re)) {
                    var day, mnt, yr;
                    yr = parseInt(regs[3]);
                    mnt = parseInt(regs[2]);
                    dy = parseInt(regs[1]);
                    if (mnt > 0) mnt = mnt - 1;
                    var cd = new Date(Date.UTC(yr, mnt, dy));
                    cd.setDate(cd.getDate() + 2);
                    var mn = cd.getMonth() + 1; //parseInt(cd.getMonth()) + 1;
                    var chgDt = pad(cd.getDate(), 2) + "/" + pad(mn, 2) + "/" + cd.getFullYear();
                    // alert(chgDt);
                    var cs = new Date(Date.UTC(yr, mnt, dy));
                    var mind = new Date(Date.UTC(yr, mnt, dy));
                    mind.setDate(mind.getDate() + 1);
                    var mindx = pad(mind.getDate(), 2) + "/" + pad(parseInt(mind.getMonth()) + 1, 2) + "/" + mind.getFullYear();
                    var xo = $("#CheckOut").val();
                    //                    $("#CheckOut").datepicker("option", "minDate", mind);

                    if (checkDate(xo)) {
                        if (regss = xo.match(re)) {
                            yr = parseInt(regss[3]);
                            mnt = parseInt(regss[2]);
                            dy = parseInt(regss[1]);
                            if (mnt > 0) mnt = mnt - 1;
                            var co = new Date(Date.UTC(yr, mnt, dy));
                            if (co <= cs) {
                                $("#CheckOut").val(chgDt);
                                // $("#CheckOut").datepicker("option", "setDate", cd);
                            }
                        }
                        else {
                            // $("#CheckOut").datepicker("option", "setDate", cd);
                            $("#CheckOut").val(chgDt);
                        }
                    }
                    else {
                        // $("#CheckOut").datepicker("option", "setDate", cd);
                        $("#CheckOut").val(chgDt);
                    }
                    //checkout.minDate = n;
                    $("#CheckOut").datepicker("option", "minDate", mindx);
                    //$("#CheckOut").datepicker("show");
                }
                else { $("#CheckIn").val(idat); $("#CheckOut").val(odat); }
            }
            else { $("#CheckIn").val(idat); $("#CheckOut").val(odat); }
        });


        $("#spnrAd").dpNumberPicker({
            value: 1,
            min: 1,
            max: 8,
            step: 1,
            afterChange: function () { $("#Adults").val(this.options.value); }
        });
        $("#spnrCd").dpNumberPicker({
            value: 0,
            min: 0,
            max: 8,
            step: 1,
            afterChange: function () { $("#Children").val(this.options.value); }
        });

        $("#spnrBed").dpNumberPicker({
            value: 0,
            min: 0,
            max: 6,
            step: 1,
            afterChange: function () { $("#BedRooms").val(this.options.value); }
        });
    });

    function valdInOutDates() {
        var v = $.trim($("#CheckIn").val());
        if (checkDate(v)) {
            re = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
            if (regs = v.match(re)) {
                var cs = new Date(regs[3], regs[2], regs[1]);
                var xo = $("#CheckOut").val();
                //                    $("#CheckOut").datepicker("option", "minDate", mind);

                if (checkDate(xo)) {
                    if (regss = xo.match(re)) {
                        var co = new Date(regss[3], regss[2], regss[1]);
                        if (co <= cs) {
                            $("#DestinationAlert").html('Please enter a checkout date which falls after checkin date');
                            $("#CheckOut").focus();
                            return false;
                        }
                    }
                    else {
                        $("#DestinationAlert").html('Invalid Check Out date');
                        $("#CheckOut").focus();
                        return false;
                    }
                }
                else {
                    $("#DestinationAlert").html('Invalid Check Out date');
                    $("#CheckOut").focus();
                    return false;
                }
            }
            else {
                $("#DestinationAlert").html('Invalid Check In date');
                $("#CheckIn").focus();
                return false;
            }
        } else {
            $("#DestinationAlert").html('Invalid Check In date');
            $("#CheckIn").focus();
            return false;
        }
        return true;
    }
    function pad(num, size) {
        var s = num + "";
        while (s.length < size) s = "0" + s;
        return s;
    }
    function checkDate(field) {
        var allowBlank = true; var minYear = 2014; var maxYear = (new Date()).getFullYear() + 1;
        // regular expression to match required date format
        re = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
        if (field != '') {
            if (regs = field.match(re)) {
                if (regs[1] < 1 || regs[1] > 31)
                { return false; }
                else if (regs[2] < 1 || regs[2] > 12)
                { return false; }
                else if (regs[3] < minYear || regs[3] > maxYear)
                { return false; }
            } else { return false; }
        } else { return false; }
        return true;
    }
    function daydiff(first, second) {
        return (second - first) / (1000 * 60 * 60 * 24);
    }
    $(function () {

        $("#Destination").autocomplete({
            minLength: 0,
            source: "/Common/GetDestination",
            focus: function (event, ui) {
                $("#Destination").val(ui.item.value);
                return false;
            }
        })
        .autocomplete("instance")._renderItem = function (ul, item) {
            ul.addClass("custom");
            return $("<li>") //.addClass("custom")
            .append("<a>" + item.label + "<br>" + item.desc + "</a>")
            .appendTo(ul);
        };
    });
    function submitSForm() {
        //if ($.trim($("#Destination").val()) == '') {
        //    $("#DestinationAlert").html("Please enter a valid city, location or property name to search");
        //    $("#Destination").val('').focus();
        //    return false;
        //}
        //else {
        //    if (!valdInOutDates()) return false;
        //}
        $.post('@(Url.Action("ApplyFilter", "PropertyAdd", new { area = "Admin" }))', $("#searchform").serialize(), function (data) {
            $("#resultlisting").html(data);
        });

        @*frm = document.getElementById("searchform");
        //   form.target = '_blank';
        frm.action = '@Url.Action("ApplyFilter", "PropertyAdd", new { area = "Admin" })';
        frm.submit();
        return true;*@
    }

</script>

<script type="text/javascript">

    $(document).ready(function () {

        $("#owl-demo").owlCarousel({
            navigation: true,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 2
                },
                450: {
                    items: 3
                },
                767: {
                    items: 4
                },
                991: {
                    items: 4
                },
                1199: {
                    items: 4
                }
            }
        });

        $("#owl-demo2").owlCarousel({
            navigation: true,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 2
                },
                450: {
                    items: 3
                },
                767: {
                    items: 4
                },
                991: {
                    items: 5
                },
                1199: {
                    items: 5
                }
            }
        });

    });



</script>


